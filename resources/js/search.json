[[{"i":"bem-vindo-à-wiki-da-struct","l":"Bem-Vindo à Wiki da {struct}","p":["Este é um espaço no Retype com o objetivo de concentrar todo o conhecimento possível da Struct em um só lugar."]},{"l":"Conteúdo","p":["Neste espaço deve-se concentrar todos os conhecimentos de gestão e execução de projetos assim como gestão da Struct em si. Por favor, contribua toda vez que verificar que algo está faltando. Caso tenha dúvidas de como trabalhar aqui, acesse a documentação do Retype."]},{"l":"Primeiros Passos"},{"l":"Repositório","p":["Para começar a trabalhar no DocStruct, clone o repositório no GitHub, acesse a branch da sua diretoria e começe a fazer as modificações nela. É recomendado avisar os outros membros da sua diretoria, para que não haja duas pessoas trabalhando na mesma branch ao mesmo tempo."]},{"i":"observações-importantes","l":"Observações importantes:","p":["Use, preferencialmente, a branch de desenvolvimento da sua diretoria para fazer mudanças;","Jamais faça mudanças diretamente na main (boatos de que quem o fez não está mais na Struct para contar a história);","Antes de abrir um pull request, verifique o funcionamento da branch no ambiente de desenvolvimento;"]},{"l":"Rodando localmente","p":["Instale a nova ferramenta para documentação com o gerenciador de pacotes desejado, e rode retype start:"]},{"l":"Arquivos","p":["Para poder começar a documentar com retype:","Criação do diretório: os futuros diretórios e seus arquivos .md aparecerão na barra lateral, com seus próprios nomes caso não sejam personalizados/configurados.","Configuração: cria-se um arquivo .yml para algumas configurações, como os nomes dos diretóros na barra lateral, ícones para representação etc.","Conteúdo: enfim, cria-se um arquivo .md, onde será estruturada e organizada toda a documentação por meio das ferramentas do Retype."]},{"i":"#","p":["É possível criar subdiretórios, basta fazer o mesmo processo só que dentro de um diretório."]},{"l":"Algumas ferramentas importantes"},{"l":"Alerta","p":["Este é um alerta do retype"]},{"l":"Código"},{"l":"Container","p":["A vantagem do container é você poder personalizar o css separadamente.","Este é um container personalizado"]},{"l":"Table","p":["Para mostrar a diferência entre aparência e código, usamos o componente table"]},{"i":"#","p":["Para mais informações sobre documentação em Retype, consulte a seção especificações."]},{"l":"Especificações"},{"l":"Git e GitHub","p":["Para realizar modificações nas páginas do Retype, é necessário ter um conhecimento básico em alguns conceitos de git, como: add, commit, pull, clone, push e branch. Caso não possua domínio sobre esses conceitos ou deseje revisar algum, a Struct possui um material apresentando uma explicação sucinta dos principais comandos. Caso queira obter informações mais detalhadas, pode-se consultar o livro Pro Git gratuitamente."]},{"l":"Funcionamento","p":["O Retype usa arquivos de formato markdown, como componentes, para a estruturação da documentação online, os exibindo na forma de páginas web. O roteamento dos componentes é feita de forma automática pelo Retype e de acordo com os diretórios do projeto. O diretório raiz do projeto pode conter um arquivo .yml que cuida da configuração do site, como a navbar, footer etc. Assim como, cada componente do projeto também pode conter um arquivo .yml para a configuração separada do componente e um arquivo .md para a própria estruturação em markdown.","Em um arquivo .yml, com nome padrão de index.yml, é feita a personalização e configuração do site ou de um componente específico. Para a configuração do site, pode ser necessário a consulta das ferramentas providas pelo Retype. Já para a configuração de um componente específico há outras ferramentas disponíveis.","Em um arquivo .md é feita a estruturação em markdown do site ou componente, sem ele nada deve aparecer no site ou no componente. O Retype provê muitas ferramentas para estruturar o conteúdo da documentação. Caso deseje aprender mais sobre como escrever em arquivos markdown, seria interessante também dar uma olhada em sua sintaxe básica."]}],[{"i":"o-que-é-nextauth","l":"O que é NextAuth?"},{"l":"Next Auth","p":["Essa documentação foi desenvolvida assumindo que o leitor tem familiaridade com os conceitos básicos de Next, se não for o caso consulte o DocStruct de Next.js para qualquer dúvida.","O Next Auth é uma biblioteca de autenticação para projetos desenvolvidos com o framework Next.js. Essa biblioteca facilita a implementação de autenticação de usuário vindos de um back-end já existente (autenticação por terceiros, por exemplo). É possível utilizar credenciais, como e-mail e senha, mas a biblioteca dá maior foco ao OAuth, fornecida pelo Google, GitHUb, etc. garantindo a segurança e facilitando a implementação.","Para acessar a documentação de instalação e implementação do Next Auth, clique Aqui."]}],[{"l":"Instalação","p":["Para adicionar o Next Auth ao projeto basta utilizar o seguinte comando no terminal: yarn add next-auth , ou pnpm add next-auth se estiver utilizando o pnpm."]},{"l":"Implementação","p":["!!Atenção: verifique a versão do Next.js utilizada no projeto e se o tipo de roteamento usado é o Pages Router ou o App Router, pois o modo de implementação é diferente."]},{"i":"para-versão-de-nextjs-anterior-à-132","l":"Para versão de Next.js anterior à 13.2","p":["Para adicionar o NextAuth.js a um projeto, crie um arquivo chamado [...nextauth].js na pasta pages/api/auth/ e preencha-o com o código a baixo. Este arquivo contém o manipulador de rotas dinâmicas para o NextAuth.js, que também conterá todas as configurações globais do NextAuth.js e todas as solicitações para /api/auth/*( signIn, callback, signOut, etc.) serão automaticamente tratadas pelo NextAuth.js."]},{"i":"para-versão-de-nextjs-porterior-à-132-com-o-app-router","l":"Para versão de Next.js porterior à 13.2 com o App Router","p":["Nesse caso, crie um arquivo chamado route.js na pasta app/api/auth/[...nextauth]/ e preencha-o com o código a baixo.","Exemplo de route.js com GoogleProvider(Google como autenticador):"]},{"l":"Utilização"},{"l":"Configurando useSession","p":["O useSession é um importante hook do React que é utilizado nas aplicações Next Auth para recuperar informações da sessão de usuário.Para utilizá-lo primeiro é preciso expor o conteudo da sessão de usuário por meio do SessionProvider /,para implementá-lo,dentro da pasta app, crie uma pasta components e, dentro desta um arquivo provider.tsx com o seguinte código:","Agora, no aqrquivo layout.tsx, adicione as tags de Providers por fora do elemento {children} como no exemplo:","Dessa forma, o useSession terá acesso aos dados e status da sessão.","A desestruturação dos pageProps em session e no resto das pageProps significa uma alteração no comportamento normal de getServerSideProps e getStaticProps.","Caso pegue a session no servidor e tente passar para a página como suas pageProps, a session será interceptada aqui no App e nunca chegará no seu componente da página. Ao invés disso será usada para alimentar o hook useSession, portanto use-o. Exemplo:"]},{"l":"Utilização do useSession","p":["O Hook do React useSession usado no NextAuth.js é a maneira mais fácil de verificar se alguém está autenticado.Como no exemplo de botão de SignIn:","A ideia é armazenar os resultados do useSession em props para aferir se o usuário ja foi autenticado."]},{"l":"Autenticação","p":["O Next Auth possibilita que o critério de autenticação(provedores) seja por meio de credenciais (nome,senha), email ou autenticações externas(google,GitHub,etc.)."]},{"l":"OAuth","p":["OAuth é o processo de autenticação do NextAuth que utiliza de processos de login externos preexistentes, ou seja, dá ao usúario a opção de realizar a autenticação por outra plataforma como Github, Google, Twitter, etc.","Por serem processos externos de várias fontes diferentes, cada autenticação escolhida terá uma documentação específica diferente. Para acessar todos os provedores de autenticação externa suportados pelo NextAuth e suas respectivas documentações clique Aqui.","Segue um exemplo demonstrativo do Google como provedor OAuth:"]},{"i":"como-conseguir-as-credenciais-para-a-autenticação-externa-next-authgoogle","l":"Como conseguir as credenciais para a autenticação externa Next auth(Google)","p":["Utilizarei o exemplo do Google como autenticador externo, pela grande gama de documentação disponível.","Para configurar a autenticação com o Next Auth usando o Google como provedor, você precisará obter as credenciais apropriadas do Google. Siga estas etapas:","Acesse o Console de Desenvolvedores do Google.","Com o projeto criado e/ou adicionado na plataforma, na barra de opções lateral clique no item Credenciais e em seguida, no botão Criar credenciais, escolha ID do cliente OAuth como tipo de credencial, e configure as informações do OAuth de acordo com as necessidades do projeto e seguindo as intruções.","Preencha o campo Tipo de aplicativo com a opção Aplicativo da Web, nas seções Origens JavaScript autorizadas e URLs de redirecionamento autorizados, adicione URLs de acordo com a natureza do aplicativo, por exemplo, vale colocar http://localhost:3000 e http://localhost:3000/api/auth/callback/google respectivamente, para uma aplicação que está rodando localmente. E , por fim ,clique em Criar. OBS:A segunda URL depende de como foram implementadas as rotas no projeto!!","Após a criação do cliente OAuth, serão exibidos O ID do cliente e a Chave secreta do cliente.","Por fim, crie um arquivo .env para guardar essas informações.Como no exemplo:","Com as credenciais armazenadas de forma segura em seu arquivo .env, você pode configurar a autenticação com o provedor do Google de maneira segura e eficaz em seu projeto Next Auth."]},{"l":"Credenciais","p":["A autenticação por Credenciais permite lidar com o login usando credenciais arbitrárias, como nome de usuário e senha, ele vem com a restrição de que os usuários autenticados dessa maneira não se mantém no banco de dados e, consequentemente, é necessário o uso de tokens(id) para implementar a validação. Por exemplo:","É necessário ter um serviço de autenticação externo, ou criar um do zero, para poder usar o CredentialsProvider de forma realmente útil! O NextAuth nesse caso é muito menos útil! Considere recorrer a outras bibliotecas, como Lucia Auth."]}],[{"i":"o-que-é-prisma-orm-","l":"O que é Prisma ORM ?"},{"i":"o-que-é-orm-","l":"O que é ORM ?","p":["ORM, ou Mapeamento Objeto-Relacional, é uma técnica de programação que permite que os desenvolvedores de software interajam com bancos de dados relacionais usando objetos e classes no lugar de consultas SQL diretas.A ideia principal por trás do ORM é eliminar a necessidade de escrever consultas SQL manualmente e simplificar a interação entre o código da aplicação e o banco de dados relacional. Em vez de tratar as tabelas e registros do banco de dados como entidades separadas e escrever SQL para buscar, inserir, atualizar ou excluir dados, os desenvolvedores podem trabalhar com objetos em código que representam diretamente os dados do banco de dados. O ORM mapeia esses objetos para tabelas do banco de dados e vice-versa."]},{"i":"o-que-é-prisma-orm-","l":"O que é Prisma ORM ?","p":["O Prisma ORM é uma biblioteca de mapeamento objeto-relacional (ORM) utilizada no desenvolvimento de aplicativos de banco de dados em JavaScript ou TypeScript. Sua principal função é facilitar a interação entre uma aplicação e um banco de dados relacional, como o MySQL, PostgreSQL e SQLite, permitindo que os desenvolvedores acessem e manipulem os dados do banco de dados usando código JavaScript/TypeScript em vez de escrever consultas SQL manualmente."]}],[{"i":"como-instalar-o-prisma-orm-","l":"Como instalar o Prisma ORM ?"},{"l":"Iniciar um projeto TypeScript"},{"l":"Criando pasta"},{"l":"Acessando pasta"},{"l":"Iniciar projeto"},{"l":"Adicionar typescript e pacotes complementares"},{"i":"criar-arquivo-tsconfigjson","l":"Criar arquivo tsconfig.json"},{"i":"modificar-o-arquivo-tsconfigjson","l":"Modificar o arquivo tsconfig.json","p":["Dependendo do ambiente de execução JavaScript, pode existir um tsconfig.json pronto com uma configuração BASE, o qual pode ser encontrado em pré-definidos. Segue um exemplo, no qual é utilizado uma configuração recomendada."]},{"l":"Instalação da configuração"},{"i":"adicionando-a-configuração-no-arquivo-tsconfigjson","l":"Adicionando a configuração no arquivo tsconfig.json"},{"i":"configuração-personalizada-do-tsconfigjson","l":"Configuração personalizada do tsconfig.json","p":["Documentação tsconfig.json"]},{"l":"Configurar banco de dados PostgreSQL usando o Docker","p":["É importante ressaltar que nesse passo o Docker esta sendo utilizado como um 'simulador' de banco de dados PostgreSQL."]},{"i":"criando-arquivo-docker-composeyml","l":"Criando arquivo docker-compose.yml"},{"i":"adicionando-a-configuração-no-arquivo-docker-composeyml","l":"Adicionando a configuração no arquivo docker-compose.yml"},{"l":"Inicie o Docker"},{"l":"Inicie o container do banco de dados PostgreSQL"},{"l":"Verifique se o banco de dados está sendo executado"},{"i":"configuração-do-prisma","l":"Configuração do Prisma."},{"l":"Instalando o Prisma"},{"i":"criar-arquivos-schemaprisma-e-env","l":"Criar arquivos schema.prisma e .env","p":[".env: o arquivo para definir a URL de conexão do seu banco de dados. prisma/schema.prisma: o arquivo de configuração principal para o seu projeto Prisma (incluirá o seu modelo de dados)."]},{"l":"Definir localização do seu banco de dados","p":["PATH = diretório raiz = teste","POSTGRES_USER = usuario definido no docker-compose.yml= teste","POSTGRES_PASSWORD = senha definida no docker-compose.yml= teste"]},{"i":"quer-saber-mais-prisma-orm-","l":"Quer saber mais Prisma ORM ?","p":["-----------------> Documentação oficial do Prisma.<--------------------"]}],[{"i":"como-usar-prisma-orm-","l":"Como usar Prisma ORM ?"},{"l":"Criando Models","p":["Neste exemplo, criamos duas models: \"User\" e \"Post\", na qual a model \"User\" tem campos como \"id\", \"username\" e \"email\", enquanto a model \"Post\" possui campos como \"id\", \"title\", \"content\", \"published\", \"authorId\", e uma relação com o autor (\"User\")."]},{"l":"Criar as tabelas no banco de dados"},{"l":"Documentação sobre a criação de models","p":["Documentação Criação de Models","Documentação Relacionamento entre Models"]},{"l":"CRUD"},{"i":"readgetindex","l":"Read(Get/Index)","p":["Criar um arquivo TypeScript","Modificar o arquivo typescript","Executar arquivo typescript"]},{"i":"quer-saber-mais-sobre-read-","l":"Quer saber mais sobre Read ?","p":["Documentação Pesquisa de Dados"]},{"i":"readgetshow","l":"Read(Get/Show)","p":["Criar um arquivo TypeScript","Modificar o arquivo typescript","Executar arquivo typescript"]},{"i":"quer-saber-mais-sobre-read--1","l":"Quer saber mais sobre Read ?","p":["Documentação Pesquisa de Dados"]},{"i":"createpost","l":"Create(Post)","p":["Criar um arquivo TypeScript","Modificar o arquivo typescript","Executar arquivo typescript"]},{"i":"quer-saber-mais-sobre-create-","l":"Quer saber mais sobre Create ?","p":["Documentação Criação de Dados"]},{"i":"deletedelete","l":"Delete(Delete)","p":["Criar um arquivo TypeScript","Modificar o arquivo typescript","Executar arquivo typescript"]},{"i":"quer-saber-mais-sobre-delete-","l":"Quer saber mais sobre Delete ?","p":["Documentação Exclusão de Dados"]},{"i":"updateput-e-patch","l":"Update(Put e Patch)","p":["Criar um arquivo TypeScript","Modificar o arquivo typescript","Executar arquivo typescript"]},{"i":"quer-saber-mais-sobre-update-","l":"Quer saber mais sobre Update ?","p":["Documentação Atualização de Dados"]}],[{"l":"O que é tRPC","p":["A denominação tRPC é uma abreviação de \"TypeScript Remote Procedure Call\", uma biblioteca do TypeScript que se insipira no RPC (Remote Procedure Call), um protocolo específico de comunicação que permite a comunicação entre um cliente e servidor em diferentes dipostivos.","Essa biblioteca trabalha com uma estrutura que facilita a visualização dos endpoints (pontos de comunicação) e a compreensão do que se passa por eles. Deste modo, temos acesso aos tipos de dados, que estão sendo comunicados, pelo lado cliente e, assim, temos um melhor monitoramento do funcionamento e de possíveis erros.","Em resumo, tRPC ajuda a tornar a comunicação entre cliente e servidor mais clara, segura e eficiente, uma vez que possibilita uma maior transparência dos dados percorridos no sistema."]}],[{"l":"Instalação","p":["O tRPC possui vários tipos de pacotes com conteúdos extras, para instalar o pacote padrão:","Deve-se certificar que a versão do TypeScript seja igual ou superior à versão 4.7.0.","É recomendado a atribuição \"strict\": true no arquivo tsconfig.json, já que não há suporte para o contrário.","npm install @trpc/server @trpc/client","yarn add @trpc/server @trpc/client","pnpm add @trpc/server @trpc/client","bun add @trpc/server @trpc/client"]},{"l":"Pacotes recomendados","p":["Para projetos em Next.js é recomendado a instalação de uma versão que é uma combinação da versão para React (React Query) com algumas ferramentas específicas a mais de integração para o Next:","npm install @trpc/server @trpc/client @trpc/react-query @trpc/next @tanstack/react-query zod","yarn add @trpc/server @trpc/client @trpc/react-query @trpc/next @tanstack/react-query zod","pnpm add @trpc/server @trpc/client @trpc/react-query @trpc/next @tanstack/react-query zod","bun add @trpc/server @trpc/client @trpc/react-query @trpc/next @tanstack/react-query zod","Para projetos somente em React, basta o mesmo procedimento anterior, agora sem o parâmetro @trpc/next e zod(caso não use zod em React)"]}],[{"l":"Prática","p":["tRPC é uma ferramenta para comunicação entre back-end e front-end, então começaremos definindo rotas no back:"]},{"l":"Iniciando o tRPC no back-end","p":["A primeira tarefa a ser feita é iniciar o tRPC no back-end. O tRPC funciona através de chamadas de funções de um lado da aplicação para outro e, para termos acesso às propriedades e aos métodos dessa ferramenta, precisamos inicializar uma instância de roteador.","Assim, criaremos um arquivo trpc.ts onde inicializaremos o tRPC por meio de uma const t(nome usado somente para exemplo) e exportaremos as propriedades router e procedure da instância."]},{"i":"por-que-exportar","l":"Por que exportar?","p":["Exportamos duas propriedades que definimos no arquivo trpc.ts para facilitar o uso delas em quaisquer outros arquivos e alguma possível manutenção dessa aplicação, pois precisaremos fazer alterações no \"arquivo fonte\" e não em todos os lugares onde as usarmos."]},{"l":"Uso das propriedades","p":["Para o lado cliente poder se comunicar com o servidor é preciso definir \"rotas de comunicação\", pois é por meio das rotas que o servidor é direcionado ao procedimento/protocolo específico, definidas usando o router.","Em seguida, a rota levará a um procedimento ( procedure) no qual é passado uma função que pode chamar determinadas funções do banco de dados e/ou efetuar outras ações. Logo, também precisamos usar a propriedade procedure para definirmos o que deve ser feito e as funções a serem chamadas em uma determinada rota.","No caso, procedures está definido como publicProcedure pois, no exemplo, definiremos requisições que não exigirão autenticação."]},{"l":"Definindo as rotas","p":["Então, importamos em outro arquivo, mais por questão de organização, as propriedades router e publicProcedure e definimos um conjunto de rotas em uma const appRouter. Também deve-se importar o banco de dados feito em sua aplicação, pois nas rotas serão definidas requisições para o mesmo.","Para fazer as definições, é usado um objeto/dicionário onde as chaves serão os nomes das rotas e os valores serão as ações efetuadas no momento em que elas forem chamadas pelo lado cliente.","Usamos o publicProcedure, que definirmos anteriormente, para efetuar requisições/procedimento ao servidor. Um procedimento pode ser:","query busca de informação","mutation criação, atualização ou delete de informação","subscription cria uma ligação persistente com o servidor e recebe mudanças. É o famoso websocket.","No caso, estamos definindo uma requisição userList que irá listar todos os usuários de um servidor, logo usamos query."]},{"l":"Entrada de Dados","p":["Para receber entrada de informações do lado cliente, basta usar o input() que irá receber informações e as retornará para o query() podendo ser, primeiramente, validadas, caso efetuado um tratamento de dados. Usamos o pacote \"zod\" para fazer a validação da entrada de dados. Os campos nos quais deseja fazer alguma validação coloque z.tipoDeDadoDesejado(), exemplo:","O query() recebe um objeto com várias informações como dados de contexto, de usuário, log-In etc. Portanto, para isolarmos os dados de entrada/input usamos o {input} que irá desestruturar o objeto e pegar somente os dados que queremos para fazermos as requisições.","É possível passar um objeto com alguns parâmetros de mensagens personalizadas, por exemplo:","Para mais informações sobre o a validação de dados, clique aqui"]},{"l":"Servidor","p":["O servidor é o que irá ouvir as requisições e, de acordo com as rotas definidas, dar uma determinada resposta. Porém, ainda não iniciamos nenhum servidor, logo, a seguinte etapa será iniciar um. É importado o método createHTPPServer do próprio tRPC, que irá criar o servidor, sendo necessário passar um roteador para o mesmo saber como reagir às requisições. Também usado o método listen, que define o endereço em que o servidor receberá requisições."]},{"l":"Configurando servidor no lado cliente"},{"l":"Definindo a conexão entre servidor e cliente","p":["Da mesma forma que é necessário criar um servidor para conseguir estabelecer uma comunicação com o cliente, é necessário haver no lado cliente uma maneira de se comunicar com o servidor, uma maneira por onde mandar suas requisições.","O lado cliente fica ciente das informações que estão sendo manipuladas por meio dos tipos de dados do roteador. Logo, para estabelecer essa conexão primeiro temos que exportar o tipo do nosso roteador adicionando o seguinte trecho no arquivo /server/index.ts:","Então, o AppRouter é importado e passado ao método createTRPCProxyclient para a criação do proxy. Como é um argumento de tipo, ou seja, são passados os tipos de dados em que a função tem que trabalhar, ele é declarado entre os símbolos <>, uma característica do TypeScript.","Assim, também iremos definir um httpBatchLink que é um tipo de link que lida com requisições em lote como se fosse uma, declarando o endereço do nosso servidor para efetuarmos as nossas requisições e de forma mais otimizada:","Com o proxy trpc, exportamos para facilitar o reuso em outros arquivos ou podemos manipulá-lo no mesmo."]},{"l":"Fazendo requisições no lado cliente","p":["Com o proxy definido e exportado, podemos importar o proxy trpc para qualquer arquivo e fazermos requisições através dele, no exemplo usaremos no mesmo arquivo:","Como estabelecemos uma conexão cliente-servidor dos tipos de dados e definimos o endereço do servidor, temos acesso às rotas definidadas no back-end e podemos efetuar as requisições.","Neste exemplo usamos a rota definida anteriormente userById para efetuarmos a requisição ao servidor, que irá responder com informações de um usuário filtrado pelo seu ID. Também usamos a rota userCreate que cria um usuário com nome."]},{"i":"#","p":["Para mais informações sobre tRPC, consulte aqui"]}],[{"l":"Configurando o Ambiente"},{"i":"por-que-usar-typescript","l":"Por que usar TypeScript?","p":["Se você já programou em JavaScript, torna-se ainda mais fácil programar em TypeScript, afinal eles são basicamente \"a mesma coisa\". O que isso quer dizer? É que o TypeScript é na verdade um superset open-source, desenvolvido pela Microsoft, ou seja, uma extensão da linguagem JavaScript, com a adição de algumas propriedades que melhoram o nosso código.","Tá, mas ainda não chegamos no tópico principal desta introdução né... por que usar o TypeScript? Para começar, ele funciona como uma ferramenta que adiciona tipagem estática ao JavaScript, que pode ser escrita em qualquer ambiente de desenvolvimento e que, quando instalada via gerenciador de pacotes JS, permite checar erros e utilizar outros compiladores que suportam este mecanismo. Com isso, o TypeScript eleva o nível de produtividade e ainda garante o desenvolvimento de aplicações complexas, eficazes e seguras, onde, por meio da verificação de tipos, é possível mais facilmente verificar se cada função, objeto ou elemento do seu código está sendo utilizado e gerenciado da forma que você espera, facilitando também a manutenção e modificação do código.","Além do potencial de detecção de erros durante o desenvolvimento de projetos, outra vantagem é a possibilidade de incluir a IntelliSense da IDE que está sendo usada. Isso reflete num ambiente muito mais ágil e seguro enquanto o código está sendo digitado pelo desenvolvedor."]},{"l":"Verificador de Tipos Estáticos","p":["Detecção de erros sem execução do código é chamada de verificação estática, e determinar o que é um erro e o que não é, baseado nos tipos dos valores sendo operados é chamado de verificação de tipos. TypeScript verifica um programa por erros antes de sua execução e faz isso baseado nos tipos dos valores, ou seja, é um verificador de tipos estático. Ele adiciona regras de tipagem e regras sobre como diferentes tipos de valores podem ser usados.","Além do mais, a grosso modo, uma vez que o compilador do TypeScript terminou de verificar o seu código, ele apaga os tipos para produzir o código resultante \"compilado\". Isso significa que uma vez que seu código for compilado, o código JS puro de resultado não tem informação de tipo, ou seja, o TypeScript nunca muda o comportamento do seu programa baseado nos tipos que infere.","Para treinar e exercitar nossa escrita de código, o TypeScript tem um playground online."]},{"l":"Instalação e uso","p":["Geralmente, na criação do seu projeto, seja em Vite ou seja em Next, é possível especificar se deseja utilizar como linguagem o JavaScript ou o TypeScript, e, assim, toda mágica de instalação do superset já é feita para nós. Porém, também é possível adicionar o TypeScript manualmente no seu projeto, e o processo para isso é bastante simples:","Os passos a seguir servem apenas para exemplificação de como o TypeScript surge e opera no nosso diretório. É altamente recomendável que você escolha a utilização da linguagem TypeScript, quando nas opções de criação do seu projeto.","Primeiramente, para adicionar o TypeScript nas dependências do projeto, basta executar um dos seguintes comandos no terminal, de acordo com o gerenciador de pacotes que você e sua equipe estejam utilizando:","Porém, ainda precisamos explicitar que desejamos configurar a ferramenta, e para isso precisamos do arquivo tsconfig.json, onde iremos ajustar o modo de operação do TypeScript sobre o nosso projeto.","Para a criação do arquivo, basta rodar o seguinte comando no terminal:","Com isso, um arquivo tsconfig.json totalmente \"cru\" irá ser criado na raiz do seu diretório, com as explicações de todas as possíveis configurações que você pode aplicar no compilador do TypeScript. Necessitando, assim, que você edite completamente o arquivo para obter aquilo que deseja no seu projeto.","Entretanto, o Vite e o Next são capazes de já realizarem uma configuração básica por padrão. Seguem exemplos de como essas ferramentas implementam a configuração do TypeScript para o seu projeto."]},{"l":"Vite","p":["tsconfig.json:","tsconfig.node.json:"]},{"l":"Next","p":["tsconfig.json:"]},{"i":"opções-do-tsconfigjson","l":"Opções do tsconfig.json","p":["Já sabemos agora como o TypeScript entra no nosso projeto e onde conseguimos configurar seu compilador e seu modo de operação. Porém... como configurar?? Este texto irá mostrar algumas opções relevantes de se saber na hora de mexer no seu tsconfig.json.","Não é recomendável que você fique demasiadamente editando estes arquivos de configuração. O ideal é que você faça isso no início do projeto, e que realize, apenas se necessário, alterações pontuais no decorrer do desenvolvimento, avisando à equipe ou ao gerente do projeto as alterações realizadas.","Primeiramente, o arquivo é constituído por um objeto, no qual colocamos nossas possíveis configurações, como: compilerOptions, include, exclude, extends, etc.","Estrutura básica de um arquivo tsconfig.json:"]},{"l":"Falando de compilerOptions","p":["Este será um objeto no qual você poderá descrever como o compilador deve funcionar, de acordo com diversas opções de configuração que ele suporta. Entre estas opções, vale-se citar:"]},{"l":"target","p":["Recebe uma string e especifica a versão do JavaScript para a qual o superset irá ser compilado. Valores válidos: \"es2016\", \"es2020\", \"es5\"."]},{"l":"module","p":["Recebe uma string e especifica qual módulo de código será gerado. Valores válidos: \"esnext\", \"commonjs\"."]},{"l":"jsx","p":["Recebe uma string e especifica qual código JSX será gerado. Valores válidos: \"preserve\", \"react-jsx\"."]},{"l":"strict","p":["Recebe um boolean e, quando igual a true, habilita todas as rigorosas verificações de tipo para o seu código, como: noImplicityAny, strictNullChecks, strictFunctionTypes, noUnusedParameters, noImplicitReturns, etc.","Caso você queira aprender mais opções de configuração do TypeScript, é possível ir à própria documentação do superset, onde você irá encontrar em detalhes explicações e exemplos de cada opção de configuração."]}],[{"l":"Entendendo a Linguagem"},{"l":"Definindo Tipos","p":["Em TypeScript, dois pontos depois de um nome de variável inicia uma anotação de tipo, e a assinatura de tipo depois dos dois pontos descreve os valores que a variável pode ter. Por exemplo, a linha a seguir informa ao TypeScript que variavel sempre armazenará números:","Você pode se perguntar se a inicialização de undefined de variavel não viola o tipo estático. O TypeScript contorna esse problema não permitindo que você leia variavel antes de atribuir um valor a ele."]},{"l":"Tipos por Inferência","p":["TypeScript conhece a linguagem JavaScript e vai gerar tipos para você em muitos casos, inferindo por meio da atribuição de valores, quando na declaração do que está sendo atribuído. Ficou muito confuso? Por exemplo, quando criamos uma variável e atribuímos a ela um determinado valor, como uma string, TypeScript usará o valor como seu tipo, ou seja, esta varíavel estará automaticamente tipada para aguardar uma string, sem a necessidade de explicitar isso."]},{"i":"como-descrever-tipos","l":"Como descrever tipos?","p":["O que vem depois dos dois pontos de uma anotação de tipo pode variar de simples a expressões complexas, e agora estudaremos todas essas assinaturas e como essas expressões podem ser criadas."]},{"l":"Tipos básicos","p":["Tipos estáticos primitivos do JavaScript: undefined, null, boolean, number, string, symbol, object.","Tipos específicos do TypeScript: any(o tipo de todos os valores), unknown(o tipo de um valor desconhecido), etc.","Obs.: Tenha cuidado ao utilizar o tipo unknown. Tenha certeza do que está fazendo."]},{"l":"União de tipos","p":["Com TypeScript, você pode criar tipos complexos combinando os simples. Com uma união, você pode declarar que um tipo pode ser um de muitos. Para isso, basta combinar os tipos que deseja com o operador |.","O código acima é compilado adequadamente, pois você explicitamente declarou que variavel pode assumir tanto um valor numérico quanto null."]},{"l":"Tipos em Array","p":["Os arrays serão definidos aqui das duas formas seguintes (e às vezes uma mistura dos dois):","Lists: Todos os elementos têm o mesmo tipo e o comprimento do array pode variar. Tuple: Os elementos não têm necessariamente o mesmo tipo, porém o comprimento do array é fixo.","Existem duas maneiras de descrever um array como uma lista:","No exemplo acima, tanto arr1 quanto arr2 são tipados como arrays de tamanho variável, cujos elementos são todos valores numéricos.","Suponha que você deseja agora armazenar um par de chave e valor, resultado da operação Object.entries(obj), e você espera que obj é um objeto cujas chaves são strings e os valores são números.","No exemplo acima, descrevemos primeiroParChaveValor como um array de tamanho definido de 2 elementos, onde o primeiro deve ser uma string e o segundo deve ser um valor numérico."]},{"l":"Tipos em funções","p":["Ao descrever tipos para funções, estaremos descrevendo tanto os tipos dos parâmetros que a função aguarda, quanto também o tipo do seu retorno. O exemplo abaixo é uma anotação de tipo para todas as funções que aguardam um único parâmetro, sendo ele um número, e retornam um booleano:","O código a seguir é um exemplo mais realista:","Outra forma de descrever a função acima é descrever separadamente os tipos do parâmetro da função e de seu retorno:","Obs.: se excluirmos o boolean na declaração da função acima, o TypeScript é inteligente o suficiente para inferir o tipo do retorno, a partir do escopo da função.","Porém, e se minha função não retornar nada? Terei que forçar um retorno que não desejo, só para poder tipar a função?? Não! Para começar, funções que \"não retornam nada\" no JavaScript estão na verdade retornando undefined implicitamente, e um dos tipos muito úteis que o TypeScript nos fornece é o void, o qual diz que a função sempre retorna undefined, explícito ou implicitamente."]},{"l":"Tipos em objetos","p":["Para tipar objetos, iremos aqui definir uma quantidade fixa de propriedades, conhecidas no momento do desenvolvimento, e cada propriedade pode ter um tipo diferente.","Por exemplo, para criar um objeto com um tipo definido por incluir nome: string e id: number, faremos as seguintes descrição e declaração:"]},{"l":"Criando tipos Personalizados","p":["Suponha que tenhamos no nosso código diversas variáveis que utilizam a mesma notação de tipo. Se formos reescrever a notação toda vez que declararmos mais uma variável, a escrita do código não seria nada prática e produtiva para o nosso desenvolvimento. Porém, o TypeScript nos fornece poderosas abstrações para reutilização de tipos: interface(para denotar tipos de objetos ou classes) e type(para denotar qualquer tipo).","Essa alteração permite que o tipo Ponto seja usado em vários locais dentro do código sem precisar redefinir os detalhes do tipo repetidas vezes.","E ainda não acabou, o TypeScript também nos permite estender types ou interfaces, para compor tipos mais complexos a partir de tipos simples:","No exemplo acima, o tipo Ponto3d resultante consistiria nas propriedades x e y do type ou da interface Ponto, além da nova propriedade z."]},{"l":"type alias x interface","p":["Embora type e interface pareçam similar em uma primeira olhada superficial, há na verdade muitas diferenças entre eles.","Portanto, vamos examinar as principais características de cada uma dessas duas ferramentas e comparar suas utilizações.","As interfaces possibilitam o que chamamos de declaration merging: quando duas interfaces são declaradas com o mesmo nome, ocorre uma mescla e junção dessas duas. Está é uma maneira de extender uma interface, porém de forma menos explícita, o que não é uma prática recomendável quando no desenvolvimento de determinados projetos.","Interfaces são ótimas para definir a estrutura de objetos ou classes, e elas são ideais para desenvolver um projeto aberto para implementações e extensões de comportamento, como para o desenvolvimento de bibliotecas e frameworks.","Permitindo criar \"aliases\" - ou seja, apelidos - para tipos primitivos, funções, objetos e uniões ou composições destes tipos básicos, type é uma ferramenta poderosa para expandir a tipagem do seu projeto a um nível muito avançado.","Ele permite você denotar diversos tipos e realizar uniões e interseções deles:"]},{"l":"Parâmetros opcionais","p":["Se, na estrutura da sua anotação de tipo, uma propriedade pode ser omitida, você pode colocar um ponto de interrogação após o seu nome:","Aqui, ao invés de especificar um tipo separado para um ponto tridimensional, simplesmente tornamos a propriedade z opcional."]},{"l":"Sistemas de Tipos Estruturais","p":["Quando o TypeScript compara dois tipos de objetos diferentes, para decidir se eles correspondem ou não, isso é feito estruturalmente. Isso significa que, ao invés de comparar os tipos, verificando se os dois herdam o mesmo objeto de restrição (como instanceof), as propriedades de cada objeto são comparadas."]}],[{"i":"como-utilizar-typescript-com-react","l":"Como utilizar TypeScript com React?"},{"l":"De .jsx para .tsx","p":["TypeScript é uma extensão da linguagem JavaScript. Em suma, ele traz definições de tipos para o seu código, a fim de se evitar alguns tipos de bugs e diversas depurações relacionadas tanto com a passagem de parâmetros quanto com a validação de que objetos, estados e variáveis irão se comportar como você espera.","Vale reiterar que o TypeScript não é uma nova linguagem. No final, todo seu código irá ser compilado (convertido) em JavaScript, para poder ser interpretado."]},{"i":"pacote-typesreact","l":"Pacote @types/react","p":["O pacote @types/react inclui diversos tipos para o nosso código de React, nos possibilitando prover tipagens para hooks built-in, eventos e diversos elementos. Assim, você pode usá-los sem precisar realizar nenhuma configuração adicional no seu repositório e no seu código."]},{"l":"Tipando props","p":["Escrever código TypeScript com React é bem semelhante a escrever código JavaScript com React. Uma das principais diferenças está no fato de que, quando trabalhando com um componente em TypeScript, você terá que declarar e prover tipos para as props dos seus componentes.","JavaScript","TypeScript","No exemplo acima, provemos, de forma inline, um tipo para o content do button. Entretanto, podemos separar isso da declaração do componente. A seguinte sintaxe é uma forma simples e básica de prover tipos para o seu componente React, sem ser de forma inline, o que nos possibilitará reutilizar e expandir tipagens."]},{"i":"componentes-reactnode-reactelement-htmlelement","l":"Componentes (ReactNode, ReactElement, HTMLElement)","p":["No @types/react, existem diversos tipos para componentes e marcação do nosso código jsx, o que pode acabar confundindo quem está vendo TypeScript pela primeira vez. Portanto, vamos nos focar nos tipos básicos, que podemos usar para a maioria das situações, como para passagem de componentes em props e para a tipagem de children's.","Tipando componentes:","PropsWithChildren","Com o PropsWithChildren, você consegue, de forma simples, tipar props para um componente, definindo automaticamente o children para ser capaz de receber tudo aquilo que ele pode receber ( elementos JSX, string e number).","Agora, suponha que estejamos criando um componente e ele possui, além de um children que pode agir como trigger, um conteúdo para o preencher, que pode ser tanto uma string quanto um outro componente. Bom, poderíamos pensar em passar dois children's né?! Mas, como iríamos diferir o que é trigger e o que é content?? Assim, o PropsWithChildren não será o suficiente para nos satisfazer nessa situação.","Seguem abaixo alguns exemplos de como podemos lidar com isso:","ReactNode","Uma primeira possibilidade é usar o tipo ReactNode, o qual é uma união de todos elementos JSX e tipos primitivos do JavaScript como string e number.","ReactElement","Uma segunda possibilidade, menos abrangente, é utilizar o ReactElement, o qual abrange apenas elementos JSX, excluindo tipos primitivos do JavaScript como string e number.","HTMLElement","Mais uma possibilidade, ainda menos abrangente, é utilizar o HTMLElement, o qual abrange apenas marcações do HTML, excluindo componentes React e tipos primitivos do JavaScript."]},{"l":"Props de estilização","p":["Quando usando estilização inline no React, você pode usar o tipo CSSProperties, para descrever um objeto passado para a prop style de um componente. Este tipo é uma união de todas as possíveis propriedades CSS, e é uma ótima maneira de garantir que você está passando propriedades CSS válidas."]},{"l":"Hooks nativos","p":["useState","O hook useState é capaz de realizar inferência de tipos, a partir do valor inicial passado na declaração do estado.","No código acima, será inferido que state é uma string e que setState é uma função que aguarda uma string ou uma função que retorna uma string.","Uma forma mais inteligente de tipar seus estados é realizando a declaração de tipos na chamada do useState, como no código abaixo:","useContext","A tipagem, quando no uso do useContext, ocorre na criação do contexto, por meio da chamada do createContext.","Assim como no useState, é possível a inferência de tipos, de acordo com o valor default passado dentro do createContext; porém, para casos mais complexos, recomenda-se realizar uma tipagem de forma mais inteligente, como no exemplo abaixo:"]},{"l":"Eventos","p":["Quando se trabalha com eventos DOM no React, o tipo do evento é possível de ser inferido pelo event handler, ou seja, pelo onChange, onSubmit, onClick do seu elemento React. Entretanto, quando quando você quer criar uma função a ser passada para o event handler, você então precisa explicitamente definir o tipo do evento.","O pacote @types/react fornece uma lista muito ampla de tipos que você usar para manipular eventos no seu código. Eles usam uma sintaxe semelhante, baseada em FenomenoEventElemento, onde Elemento é o tipo do elemento do qual o evento é gerado. Seguem alguns exemplos:","Para onChange de um input, use ChangeEvent","Para onSubmit de um form, use FormEvent","Demais exemplos","Há mais alguns eventos que vocês podem olhar: FocusEvent, InvalidEvent, KeyboardEvent, MouseEvent, TouchEvent, TransitionEvent, ...","Por fim, se você precisar usar algum evento que não está incluído nessa lista, você pode usar o tipo SyntheticEvent, que é o tipo do qual é extendido todos os outros tipos de evento."]}],[{"i":"o-que-é-git-","l":"O que é Git ?","p":["O Git é um sistema de controle de versão usado para rastrear e gerenciar as mudanças em arquivos de um projeto. Ele permite que várias pessoas trabalhem juntas em um mesmo projeto, registrando todas as alterações feitas ao longo do tempo. Com o Git, é possível voltar a versões anteriores, colaborar com outros desenvolvedores e manter um histórico completo das modificações. É uma ferramenta essencial para o desenvolvimento de software."]}],[{"i":"o-que-é-github-","l":"O que é GitHub ?","p":["O GitHub é uma plataforma online que utiliza o sistema de controle de versão Git para hospedar projetos de desenvolvimento de software. Ele oferece um ambiente colaborativo onde os desenvolvedores podem compartilhar, colaborar e controlar as versões de seu código-fonte. O GitHub permite que os projetos sejam acessíveis a qualquer pessoa, promovendo a transparência e a participação da comunidade. Além disso, o GitHub também oferece recursos para gerenciamento de problemas, solicitações de alteração, documentação e integração contínua, facilitando o processo de desenvolvimento colaborativo e garantindo uma melhor organização dos projetos."]}],[{"i":"qual-a-diferença-entre-git-e-github-","l":"Qual a diferença entre Git e GitHub ?","p":["O Git é uma ferramenta de controle de versão local que permite rastrear e gerenciar alterações em arquivos. Ele funciona no seu computador e registra as versões do seu código.Por outro lado, o GitHub é uma plataforma online baseada no Git. Ele permite que você armazene e compartilhe seus projetos Git de forma remota, ou seja , o Git é a tecnologia subjacente que permite o controle de versão, enquanto o GitHub é um serviço online que utiliza o Git para hospedar e aprimorar a colaboração em projetos de desenvolvimento de software."]}],[{"i":"como-instalar-o-git-","l":"Como instalar o Git ?"},{"l":"Windows","p":["Acesse o site oficial do Git e clique no botão de download para Windows;","Aguarde o arquivo de instalação ser baixado e execute-o;","Siga as instruções do assistente de instalação, aceitando as configurações padrão, a menos que você queira personalizá-las;","Selecione o editor de texto padrão que você deseja associar ao Git (recomenda-se usar o editor padrão sugerido);","Na etapa de \"Seleção de Componentes\", verifique se todas as opções estão selecionadas e clique em \"Avançar\";","Selecione \"Git from the command line and also from 3rd-party software\" para habilitar o uso do Git a partir da linha de comando;","Escolha o mecanismo de conversão de fim de linha (recomenda-se a opção padrão);","Marque a opção \"Use OpenSSL\" para garantir uma conexão segura;","Selecione o terminal padrão que você deseja usar com o Git (recomenda-se usar o Git Bash);","Conclua a instalação clicando em \"Avançar\" e, em seguida, em \"Concluir\";"]},{"l":"MacOS","p":["Existem várias opções para instalar o Git no macOS, porém iremos utilizar como base a domentação oficial do git que utiliza o Homebrew, um gerenciador de pacotes, para instalar o Git.","Abra o Terminal(Digite \"Terminal\" na barra de pesquisa e abre o aplicativo que aparecer)","Se você ainda não possui o Homebrew instalado, execute o seguinte comando no Terminal:","Depois que o Homebrew estiver instalado, execute o seguinte comando para instalar o Git:","Aguarde até que a instalação seja concluída."]},{"l":"Linux","p":["O Git já vem instalado com a maioria das distribuições do Linux, porém se o git não estiver instalado, você pode instalar o Git usando o gerenciador de pacotes padrão da sua distribuição.Além disso, é importante ressaltar que distribuições diferentes tem comandos diferentes para instalação, logo caso sua distribuição no seja ubuntu, olhe a documentação oficial para mais instruções.","Abra o Terminal.","No Ubuntu e em distribuições baseadas no Debian, execute o seguinte comando:","Aguarde até que a instalação seja concluída."]},{"i":"como-verificar-se-o-git-esta-instalado","l":"Como verificar se o Git esta instalado?","p":["Após concluir a instalação no seu respectivo sistema operacional, você pode verificar se o Git está corretamente instalado digitando o comando abaixo no terminal, o qual devera retornar a versão do git instalada."]},{"i":"tem-mais-alguma-coisa-para-fazer","l":"Tem mais alguma coisa para fazer?","p":["Após concluir a instalação do Git e verificar se ele esta instalado, siga os proximos passos para fazer configuração inicial do Git.","Abra seu terminal;","Execute os seguintes comando, para salvar seu usuario e email do GitHub:"]},{"i":"quer-saber-mais-sobre-git-","l":"Quer saber mais sobre Git ?","p":["-------------------> Documentação oficial do Git<--------------------"]}],[{"i":"quais-comandos-posso-usar-","l":"Quais comandos posso usar ?"},{"l":"Git Init","p":["O comando git init é usado para inicializar um repositório Git em um diretório específico. Quando você executa o git init em um diretório vazio ou existente, ele cria um novo repositório Git local nesse local.","Aqui está uma explicação passo a passo do acontece quando você executa o comando git init:","Criação do repositório: O comando git init cria uma pasta oculta chamada \".git\" no diretório atual. Essa estrutura é onde o Git armazenará todas as informações relacionadas ao controle de versão( evitar mexer na pasta a não ser que seja necessario ou que voce saiba o que esta fazendo).","Pronto para versionamento: Após a execução bem-sucedida do comando git init, o diretório atual está pronto para o versionamento. Agora você pode começar a adicionar arquivos ao repositório, realizar commits para registrar as alterações e usar outros comandos do Git para gerenciar o histórico e colaborar com outras pessoas.","É importante lembrar que o git init cria apenas um REPOSITÓRIO LOCAL. Se você deseja compartilhar seu repositório com outras pessoas ou colaborar em um projeto, você pode usar serviços de hospedagem em varias plataformas online (GitHub, GitLab, Bitbucket e etc), porém na Struct a platarforma principal e o GitHub para criar um REPOSITÓRIO REMOTO onde outros desenvolvedores possam contribuir."]},{"l":"Git Remote","p":["O comando git remote é usado para visualizar, adicionar ou remover repositórios remotos em seu repositório local. Os repositórios remotos são os locais onde você envia ou recebe as alterações do seu código.","Aqui está uma explicação passo a passo do que você pode fazer com o comando git remote:","Visualizar repositórios remotos: Quando você executa git remote, ele lista os repositórios remotos atualmente configurados para o seu repositório local. Por padrão, o repositório remoto principal é chamado de origin, que é usado para enviar e receber alterações.","Adicionar repositórios remotos: Você pode usar o comando git remote add link_do_repositorio para adicionar um novo repositório remoto ao seu repositório local. Isso é útil quando você deseja colaborar em um projeto hospedado em um serviço de hospedagem Git, como o GitHub, o GitLab ou o Bitbucket.","Remover repositórios remotos: Com o comando git remote remove nome_do_repositorio, você pode remover um repositório remoto existente do seu repositório local. Isso é útil se você não deseja mais colaborar com um determinado repositório remoto."]},{"l":"Git Status","p":["O comando git status é útil para entender o estado do seu repositório e tomar decisões sobre quais ações devem ser tomadas em relação aos arquivos modificados. Ele ajuda a garantir que você esteja ciente de todas as mudanças antes de realizar um commit ou realizar outras operações no Git.","Aqui está uma explicação passo a passo do acontece quando você executa o comando git status:","Status do branch: O git status mostrará em qual branch você está trabalhando no momento. Será exibido o nome da branch atual.","Ramificações: O comando irá informar se há commits na branch atual que ainda não foram enviados para o BRANCH REMOTO correspondente (se você estiver trabalhando com um REPOSITÓRIO REMOTO).","Mudanças não rastreadas: Se houver arquivos no seu diretório de trabalho que ainda não foram adicionados ao controle de versão do Git, o git status os listará como \"untracked\" (não rastreados). Isso significa que o Git não está acompanhando esses arquivos.","Mudanças a serem confirmadas: O git status mostrará os arquivos modificados que já estão sob o controle do Git. Essas alterações estão prontas para serem adicionadas ao próximo commit.","Mudanças confirmadas: Se você já fez um commit, o git status informará que o diretório de trabalho está limpo, ou seja, não há alterações pendentes.","Sugestões de próximos passos: O git status também pode fornecer sugestões sobre o que fazer em seguida, com base no estado atual do repositório. Por exemplo, pode sugerir comandos como git add para adicionar arquivos ao commit ou git branch para listar as ramificações disponíveis."]},{"l":"Git Add","p":["O comando git add é usado para adicionar arquivos ao índice (também conhecido como área de stage) do Git. Ele prepara os arquivos para serem incluídos no próximo commit.","Aqui está uma explicação passo a passo do acontece quando você executa o comando git add:","Adicionando arquivos ao índice: O git add permite que você especifique um ou mais arquivos que deseja adicionar ao índice. Por exemplo, você pode usar git add nome_arquivo para adicionar um arquivo específico ou git add . para adicionar TODOS os arquivos modificados no diretório atual.","Preparação para o próximo commit: Ao adicionar os arquivos ao índice, você está preparando-os para serem incluídos no próximo commit. O índice é uma área intermediária entre o diretório de trabalho (onde você edita os arquivos) e o repositório Git (onde os commits são registrados).","Rastreamento de alterações: Quando você adiciona um arquivo ao índice, o Git começa a rastrear as alterações feitas nele. Isso significa que o Git será capaz de registrar essas alterações no próximo commit.","Preparando um commit parcial: O git add também pode ser usado para criar commits parciais, selecionando apenas partes específicas de um arquivo para serem adicionadas ao índice. Isso é útil quando você fez várias alterações em um arquivo, mas deseja commitar apenas algumas delas.","Verificação do status: Após executar git add, você pode usar o comando git status para verificar o status do repositório e ver quais arquivos foram adicionados ao índice.","Lembrando que o git add não realiza um commit imediato, apenas prepara os arquivos para serem incluídos no próximo commit. Para registrar as alterações no repositório, você ainda precisa executar o comando git commit posteriormente."]},{"l":"Git Commit","p":["O comando git commit é usado para criar um novo commit no repositório Git. Um commit é uma confirmação das alterações feitas em um conjunto de arquivos, representando um ponto específico no histórico do projeto.","Aqui está uma explicação passo a passo do acontece quando você executa o comando git commit:","Preparando o commit: Antes de executar o comando git commit, é importante ter usado o comando git add para adicionar os arquivos desejados ao índice (área de stage). Esses arquivos são preparados para fazer parte do commit.","Abrindo o editor de mensagens: Quando você executa git commit, o Git abre um editor de texto para que você possa fornecer uma mensagem de commit. Essa mensagem descreve as alterações que estão sendo adicionadas no commit.","Escrevendo a mensagem de commit: No editor de texto, você deve escrever uma mensagem clara e concisa que descreva as alterações realizadas. A mensagem de commit é uma parte essencial do histórico do projeto e ajuda a entender o que foi alterado no commit.","Salvando o commit: Após escrever a mensagem de commit, você salva e fecha o editor de texto. Nesse momento, o Git cria um novo commit contendo todas as alterações que foram adicionadas ao índice. O commit é identificado por um hash exclusivo, que o torna único dentro do repositório.","Registrando as alterações no histórico: O commit é registrado no histórico do projeto, criando um novo ponto no histórico do desenvolvimento. Ele armazena uma versão dos arquivos e suas alterações correspondentes.","Rastreando o histórico: O Git mantém um histórico completo dos commits, permitindo que você navegue entre diferentes versões dos arquivos e reverta alterações, se necessário.","O comando git commit pode ser utilizado da seguinte forma git commit -m frase_sobre_o_que_fez_no_commit, a fim de simplificar o processo de abrir um editor de texto e aumentar a praticidade no versionamento."]},{"l":"Git Push","p":["O comando git push é usado para enviar as alterações locais do seu repositório Git para um repositório remoto. Ele atualiza o branch remoto com os commits feitos localmente.","Aqui está uma explicação passo a passo do que acontece quando você executa o comando git push:","Identificando o repositório remoto: Antes de usar o git push, você precisa configurar um repositório remoto usando o comando git remote add link_repositorio. Isso define um nome para o repositório remoto, geralmente chamado de origin, que é usado como referência para o push.","Verificando o branch atual: O git push envia as alterações do branch atual para o branch correspondente no repositório remoto. É importante garantir que você esteja no branch correto antes de executar o push.","Autenticação e conexão: O Git irá autenticar você com o repositório remoto, solicitando suas credenciais, caso necessário. Ele também estabelecerá uma conexão segura com o repositório remoto.","Enviando os commits: Quando você executa git push, o Git enviará os commits locais que não estão presentes no repositório remoto. Esses commits incluem as alterações que você fez e registrou localmente usando o git commit.","Atualizando o branch remoto: O repositório remoto receberá os commits enviados e atualizará o branch correspondente. Se não houver conflitos, o branch remoto será atualizado com as alterações do branch local.","Confirmação do push: Após a conclusão do git push, você receberá uma confirmação de que os commits foram enviados com sucesso e o branch remoto foi atualizado."]},{"l":"Git Clone","p":["Comando git clone é usado para criar uma cópia local de um repositório remoto existente. Ele permite que você baixe todo o histórico do projeto, incluindo todos os branches e commits, para o seu ambiente de desenvolvimento local, como tambem é a maneira mais comum de iniciar o desenvolvimento em um projeto existente.","Aqui está uma explicação passo a passo do que acontece quando você executa o comando git clone:","Identificando o repositório remoto: Ao executar o comando git clone link_do_repositorio, você precisa fornecer o URL do repositório remoto que deseja clonar. O URL pode ser obtido, por exemplo, a partir da página do projeto no GitHub.","Criando uma cópia local: O git clone cria uma cópia exata do repositório remoto em seu diretório local. Ele cria um novo diretório com o nome do projeto e faz o download de todos os arquivos, commits e branches do repositório remoto.","Estabelecendo conexão: O Git estabelece uma conexão com o repositório remoto e autentica você, solicitando suas credenciais, se necessário. Isso permite que você acesse o repositório e baixe todas as informações relacionadas.","Baixando o histórico do projeto: Ao executar o git clone, o Git baixa todo o histórico do projeto, incluindo todos os commits e branches. Você terá uma cópia local completa do repositório, pronta para uso.","Configurações adicionais: Além do histórico do projeto, o git clone também pode baixar outras configurações do repositório, como hooks personalizados ou arquivos de configuração específicos."]},{"i":"quer-saber-mais-comandos-do-git-","l":"Quer saber mais comandos do Git ?","p":["-------------------> Documentação oficial do Github<--------------------"]}],[{"i":"o-que-é-npm-","l":"O que é NPM ?","p":["NPM (Node Package Manager) é um gerenciador de pacotes para o ambiente de execução JavaScript/Node.js. Ele permite que desenvolvedores instalem, compartilhem e gerenciem as dependências de um projeto de maneira eficiente. O NPM facilita a obtenção de bibliotecas e ferramentas de terceiros, simplificando o processo de desenvolvimento, pois você pode aproveitar o trabalho de outros desenvolvedores em vez de começar do zero. Além disso, o NPM também fornece recursos para ajudar na criação e publicação de seus próprios pacotes JavaScript, permitindo que outros desenvolvedores os utilizem em seus projetos. No geral, o NPM é uma ferramenta fundamental no ecossistema Node.js e JavaScript, tornando o desenvolvimento mais eficiente e colaborativo."]}],[{"i":"como-instalar-o-npm-","l":"Como instalar o NPM ?","p":["Ao instalar o Node.js por meio do NVM ou do site oficia, geralmente é incluído um pacote chamado \"Node Package Manager\" que instala o NPM juntamente com o Node.js. Portanto, na prática, a maioria das instalações do Node.js incluem o NPM por padrão, consequentemente não é necessario fazer uma instalação a parte."]}],[{"i":"quais-comandos-posso-usar-","l":"Quais comandos posso usar ?"},{"l":"Comandos Basicos do NPM"},{"l":"Instalar um pacote"},{"l":"Remover um pacote"},{"l":"Iniciar um projeto novo"},{"l":"Atualiza os pacotes do projeto"},{"l":"Lista todas as dependências do projeto"},{"l":"Instalação limpa das dependências"},{"i":"quer-saber-mais-comandos-do-npm-","l":"Quer saber mais comandos do NPM ?","p":["-------------------> Documentação oficial do NPM.<--------------------"]}],[{"i":"o-que-é-nvm-","l":"O que é NVM ?","p":["NVM (Node Version Manager) é uma ferramenta que permite a instalação e gerenciamento de várias versões do Node.js em um único sistema. O Node.js é uma plataforma de desenvolvimento de software construída sobre o motor de JavaScript V8 do Chrome. Ele permite que você execute código JavaScript fora do navegador, o que o torna uma opção popular para criar aplicativos web do lado do servidor.O NVM foi criado para resolver um problema comum que os desenvolvedores enfrentam ao trabalhar com o Node.js: a necessidade de alternar entre diferentes versões do Node.js em um mesmo sistema."]}],[{"i":"como-instalar-o-nvm-","l":"Como instalar o NVM ?"},{"l":"Comandos para instalar o NVM","p":["Instalar o Curl","Instalar o NVM","Reinicie o terminal"]},{"i":"quer-saber-sobre-mais-sobre-nvm-","l":"Quer saber sobre mais sobre NVM ?","p":["----------------------> Repositorio NVM<-----------------------"]}],[{"i":"quais-comandos-posso-usar-","l":"Quais comandos posso usar ?"},{"l":"Comandos basicos NVM"},{"i":"listar-versões-disponiveis-do-nodejs-para-instalar","l":"Listar versões disponiveis do Node.js para instalar"},{"i":"instalar-uma-versão-especifica-do-nodejs","l":"Instalar uma versão especifica do Node.js"},{"i":"mostrar-as-versões-do-nodejs-instaladas","l":"Mostrar as versões do Node.js instaladas"},{"i":"remover-uma-versão-instalada-do-nodejs","l":"Remover uma versão instalada do Node.js"},{"l":"Definir uma versão como global"},{"l":"Definir uma versão no terminal"},{"i":"quer-saber-mais-comandos-do-nvm-","l":"Quer saber mais comandos do NVM ?","p":["----------------------> repositorio NVM<-----------------------"]}],[{"i":"o-que-é-postgresql-","l":"O que é PostgreSQL ?","p":["O PostgreSQL é um sistema de gerenciamento de banco de dados relacional de código aberto. Ele é frequentemente referido como Postgres e é amplamente utilizado para armazenar e gerenciar dados estruturados. O PostgreSQL oferece recursos avançados de gerenciamento de dados, como suporte para consultas complexas, transações ACID (Atomicidade, Consistência, Isolamento e Durabilidade), integridade referencial e replicação.Uma das características distintas do PostgreSQL é a sua extensibilidade. Ele permite que os usuários criem suas próprias funções, tipos de dados personalizados e até mesmo estendam a linguagem SQL para atender às necessidades específicas da aplicação."]}],[{"i":"como-instalar-o-postgresql-","l":"Como instalar o PostgreSQL ?"},{"l":"Comandos para instalar o PostgreSQL","p":["Crie a configuração do repositório de arquivos","Instale o pacote PostgresSQL","Atualize as listas de pacotes","Instale a versão mais recente do PostgreSQL","Verifique se a instalação deu certo"]},{"i":"quer-saber-sobre-mais-sobre-postgresql-","l":"Quer saber sobre mais sobre PostgreSQL ?","p":["----------------------> Documentação oficial PostgreSQL<-----------------------"]}],[{"i":"quais-comandos-posso-usar-","l":"Quais comandos posso usar ?"},{"l":"Comandos Basicos do PostgreSQL"},{"l":"iniciar servidor"},{"l":"verificar status do servidor"},{"l":"parar servidor"},{"l":"executar utilitário psql"}],[{"i":"o-que-é-wsl-","l":"O que é WSL ?","p":["O Subsistema do Windows para Linux, tambem conhecido como WSL, é uma excelente ferramenta para usuarios de Windows que desejam utilizar o Linux, visto que esse sistema operacional é atrativo para programadores, devido as facilidades e praticidades que ele proporciona com relação ao Windows. Além disso, essa ferramenta é uma das melhores formas de usar dois sistemas operacionais concomitantemente, tendo em vista que, outros metodos, como por exemplo, dual boot e maquinas virtuais são mais complexos e custosos para serem implementados, porém caso não seja possivel utilizar o WSL, esses metodos podem ser soluções substitutivas."]}],[{"i":"como-instalar-o-wsl-","l":"Como instalar o WSL ?"},{"l":"Comandos para instalação do WSL"},{"l":"Instalar o WSL"},{"l":"Verificar se a instalação deu certo"},{"i":"quer-saber-mais-sobre-wsl-","l":"Quer saber mais sobre WSL ?","p":["----------------------> Documentação oficial WSL<-----------------------"]}],[{"i":"quais-comandos-posso-usar-","l":"Quais comandos posso usar ?"},{"l":"Comandos basicos WSL"},{"l":"Listar distribuições do Linux disponiveis para instalação"},{"l":"Instalar uma distribuição do Linux"},{"l":"Listar distribuições do Linux instaladas"},{"l":"Mudar versão padrão do WSL"},{"l":"Usar uma distribuição especifica"},{"l":"Listar comandos disponiveis do WSL"},{"i":"quer-saber-mais-comandos-do-wsl-","l":"Quer saber mais comandos do WSL ?","p":["----------------------> Documentação oficial WSL<-----------------------"]}],[{"l":"Introdução","p":["Essa seção do DocStruct apresenta a documentação dos components pré-fabricados no projeto our-react-components, que tem como objetivo facilitar o processo de criação de projetos na Struct, disponibilizando e padronizando os componentes do react mais utilizados.","link para o projeto our-react-components onde se apresentam os código fonte de cada um dos components:","https://github.com/StructCE/our-react-components/tree/main/src/components","link do projeto no stackblitz (rodar o projeto online):","https://stackblitz.com/github/StructCE/our-react-components/tree/main?file=README.md,src%2FApp.tsx"]}],[{"l":"Alert","p":["O componente Alert permite que você crie caixas de alerta personalizadas para interações do usuário em aplicações React.Oferecendo controle sobre o conteúdo, títulos, botões de confirmação , cancelamento, e capacidade de definir o comportamento padrão da caixa de diálogo."]},{"l":"Instalação","p":["Lembre-se de instalar a biblioteca '@radix-ui/react-alert-dialog' pelo comando : npm install @radix-ui/react-alert-dialog"]},{"l":"Adicionando Alert a um novo projeto","p":["Para adicionar o Alert ao projeto, copie os seguintes arquivos para o seu projeto:","Alert/index.tsx","Alert/customRootRender.tsx"]},{"l":"Utilização","p":["Uso padrão:"]},{"l":"Atributos do componente Alert","p":["-title: O título da caixa de alerta.","-content: O conteúdo da mensagem de alerta.","-cancelText: Texto para o botão de cancelamento (padrão: \"Cancelar\").","-confirmText: Texto para o botão de confirmação (padrão: \"Confirmar\").","-onCancel: Função a ser chamada quando o botão de cancelamento é clicado.","-onConfirm: Função a ser chamada quando o botão de confirmação é clicado.","-children: gatilho para abrir a caixa de diálogo.","-defaultOpen: Define se o componente deve iniciar aberto ou não (padrão: false).","-canOpen: Controla se o Alert pode ser aberto (padrão: true)."]},{"l":"Personalização","p":["Você pode personalizar a aparência do Alert ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design"]},{"i":"exemplo","l":"Exemplo:","p":["Não é necessário utilizar todos os props do componente."]}],[{"l":"Button","p":["O componente Button é uma forma rápida de criar botões padronizados em suas aplicações React. A ideia é centralizar os estilos padrões de um botão no componente, mantendo as propriedades de um button / comum."]},{"l":"Adicionando Button a um novo projeto","p":["Para adicionar o Button ao projeto, copie os seguintes arquivos para o seu projeto:","Button/index.tsx"]},{"l":"Utilização","p":["Uso padrão:"]},{"l":"Personalização","p":["Você pode personalizar a aparência do Button ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design"]},{"l":"Atributos do componente","p":["Os atributos do componente 'Button', foram implementados em uma forma padrão : bg-gray-300 border-none py-[0.5em] px-[1em] hover:shadow-lg focus-visible:shadow-lg focus-visible:outline focus-visible:outline-orange-600 focus-visible:outline-offset-1 cursor-pointer rounded-md Porém podem ser alterados com uma className durante a implementação do mesmo."]}],[{"l":"Carousel","p":["O componente Carousel permite que você crie um carrossel de imagens com controles de navegação e indicadores. Ele permite que os usuários naveguem pelas imagens e fornece indicadores para mostrar a posição atual."]},{"l":"Adicionando Carousel a um novo projeto","p":["Para adicionar o Carousel ao projeto, copie os seguintes arquivos para o seu projeto:","Carousel/index.tsx","Carousel/svgs.tsx"]},{"l":"Utilização","p":["1 - Crie um array de imagens para o Carousel, no qual cada imagem contenha um id, o endereço da imagem (url) e um texto alternativo(alt).","2 - Chame a função Carousel, passando como argumento seu array criado.","3 - Estilize o carrosel de acordo com suas preferências de design."]},{"l":"Personalização","p":["Você pode personalizar a aparência do Carousel ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design"]},{"i":"exemplo","l":"Exemplo:"}],[{"l":"Dropdown Menu","p":["O componente de Menu Dropdown oferece uma maneira fácil de criar menus suspensos personalizados em suas aplicações React. Ele é altamente personalizável e fornece várias opções para criar menus de seleção, menus de contexto e muito mais."]},{"l":"Instalação","p":["Lembre-se de instalar a biblioteca '@radix-ui/react-alert-dialog' pelo comando : pnpm install @radix-ui/react-alert-dialog"]},{"l":"Adicionando Dropdown Menu a um novo projeto","p":["Para adicionar o Dropdown Menu ao projeto, copie os seguintes arquivos para o seu projeto:","DropdownMenu/index.tsx","DropdownMenu/example.tsx"]},{"l":"Exemplo","p":["Uso padrão:"]},{"l":"Observação","p":["O Menu DropDown possúi uma implementação mais extensa que os outros components, mas o modo de uso é o mesmo:","importar o componente.","adicionar ou retirar algum item do menu alterando a estrutura das tags React iniciadas com DropdownMenu.","Estilizar o Menu de acordo com suas preferências, alterando as marcações do Tailwind na className"]}],[{"l":"Form Factory","p":["O componente Form Factory simplifica a criação de formulários com validação em suas aplicações React. Ele utiliza a biblioteca Zod para definir as regras de validação dos campos do formulário e oferece recursos para exibir mensagens de erro e manipular envios de formulários."]},{"l":"Instalação","p":["Antes de usar o componente FormFactory, certifique-se de que a biblioteca Zod esteja instalada em seu projeto. Você pode instalá-la com o comando: pnpm install zod"]},{"l":"Adicionando Form Factory a um novo projeto","p":["Para adicionar o Form Factory ao projeto, copie os seguintes arquivos para o seu projeto:","FormFactory/index.tsx"]},{"l":"Utilização","p":["Para usar o componente de FormFactory em sua aplicação, siga os seguintes passos:","1 - Crie um objeto Zod (ZodObject) que irá gerenciar as validações para os campos do seu formulário. Você pode definir as regras de validação conforme necessário usando o Zod. Consulte a documentação do Zod para obter mais informações sobre as opções de validação disponíveis.","2 - Crie um objeto do tipo FormFactoryInfo que deve conter as seguintes informações:","schema: O objeto Zod criado no passo 1.","fields: Um objeto em que cada chave corresponde a um campo no seu esquema Zod e os valores são objetos com as seguintes propriedades:","label: O rótulo do campo.","defaultValue: O valor padrão do campo.","inputAtrr: Um objeto com os atributos da tag input e seus respectivos valores.","transform: Uma função que recebe o valor atual do input (sempre uma string) para converter no valor do schema (pode ser número, pode capitalizar a string, etc...)","Chame a função FormFactory passando o objeto FormFactoryInfo como argumento para criar um componente de formulário."]},{"l":"Atributos do componente Alert","p":["onValidSubmit: Uma função que será chamada quando o formulário for enviado com sucesso. Ela receberá os dados do formulário validados como argumento.","onInvalidSubmit: Uma função que será chamada quando ocorrerem erros de validação no formulário. Ela receberá um objeto ZodError como argumento.","buttonContent: O conteúdo do botão de envio do formulário. Por padrão, é \"Enviar\"."]},{"l":"Personalização","p":["Você pode personalizar a aparência do Form ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design"]},{"i":"exemplo","l":"Exemplo:"}],[{"l":"Modal","p":["O componente de Modal é uma ferramenta que facilita a criação de modais personalizados em suas aplicações React. Ele fornece a estrutura básica para criar modais e permite que você os estilize de acordo com suas necessidades."]},{"l":"Instalação","p":["Para usar este componente, você precisa ter a biblioteca @radix-ui/react-dialog instalada em seu projeto. Você pode instalá-la com o comando: pnpm install @radix-ui/react-dialog"]},{"l":"Adicionando Modal a um novo projeto","p":["Para adicionar o Modal ao projeto, copie os seguintes arquivos para o seu projeto:","Modal/index.tsx","Modal/styles.module.css"]},{"l":"Utilização","p":["Para usar o componente de Modal em sua aplicação, siga os seguintes passos:","1 - Importe os componentes Modal.Content, Modal.Root, Modal.Trigger, e Modal.Close","2 - Crie o conteúdo do modal dentro do componente Modal.Content","3 - Use os componentes Modal.Trigger e Modal.Close conforme necessário para abrir e fechar o modal."]},{"l":"Personalização","p":["Você pode personalizar a aparência do Modal ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design"]},{"i":"exemplo","l":"Exemplo:"}],[{"l":"Radio Input","p":["O componente Radio Input é um input personalizado que isola a aparência para estilização em React."]},{"l":"Instalação","p":["Para usar este componente, você precisa ter a biblioteca @radix-ui/react-radio-group instalada em seu projeto. Você pode instalá-la com o comando: pnpm install @radix-ui/react-radio-group"]},{"l":"Adicionando Radio Input a um novo projeto","p":["Para adicionar o Radio Input ao projeto, copie os seguintes arquivos para o seu projeto:","RadioInput/index.tsx"]},{"l":"Utilização","p":["Para usar o componente Radio Input em sua aplicação, siga os seguintes passos:","1 - Importe o componente CustomRadio e use ele onde você deseja exibir um input de rádio personalizado.","2 - Estilize o CustomRadio de acordo com suas preferências."]},{"i":"exemplo","l":"Exemplo:"}],[{"l":"Table","p":["O componente Table é projetado para renderizar uma tabela HTML com dados. Ele aceita uma série de props que permitem definir as colunas, as linhas e ações personalizadas a serem exibidas na tabela."]},{"l":"Adicionando Table a um novo projeto","p":["Para adicionar o Table ao projeto, copie os seguintes arquivos para o seu projeto:","Table/index.tsx","Table/styles.module.scss"]},{"l":"Utilização","p":["Para usar o componente de Table em sua aplicação, siga os seguintes passos:","1 - Importe o componente Table","2 - Defina os campos (colunas) que você deseja exibir na tabela. Isso é feito através da propriedade fields, que deve ser um array de objetos com as propriedades title(título da coluna) e name(correspondência com a propriedade dos objetos de dados).","3 - Crie um array de objetos representando as linhas de dados que você deseja exibir na tabela. Cada objeto deve ter propriedades correspondentes aos nomes definidos em fields.","4 - defina ações personalizadas que podem ser executadas em cada linha da tabela, através da propriedade actions, que deve ser um array de objetos com as propriedades title(título da ação), onClick(função a ser executada ao clicar na ação) e Icon( representa o ícone da ação).","5 - personalize a aparência da tabela ajustando as classes CSS definidas no código. Adicione ou substitua classes de acordo com suas preferências de design."]},{"i":"exemplo","l":"Exemplo:"}],[{"i":"divisão-de-pesquisa-e-desenvolvimento-rd","l":"Divisão de Pesquisa e Desenvolvimento (R&D)","p":["A divisão de Pesquisa e Desenvolvimento (R&D) possui a missão de pesquisar as ideias que surgirem dentro da empresa, incluindo as vantagens, desvantagens, custos, implementações, possíveis treinamentos e outros aspectos relativos a uma ideia. Essa pesquisa tem o propósito de gerar informações relevantes para a tomada de decisões por parte dos diretores da empresa júnior, motivando a inovação constante dentro da Struct. A supervisão dessa divisão cabe ao(à) diretor(a) administrativo-financeiro da Struct ou a algum membro da diretoria administrativo-financeira que recebeu por delegação do(a) diretor(a) essa função."]},{"l":"Sugestão de ideias","p":["Qualquer membro da Struct pode propor ideias para a divisão de R&D pesquisar. Isso é feito por meio de um documento oficial (existe um modelo no Google Drive chamado \" Sugestão de pesquisa e desenvolvimento (R&D)\"), o qual deve ser preenchido por um membro da empresa júnior e colocado na pasta \" Administração e Financeiro -> Pesquisa e desenvolvimento (R&D) -> [Ano atual] -> Sugestões\" do Google Drive.","Cabe aos membros da diretoria administrativo-financeira da Struct coletarem periodicamente as ideias na pasta de sugestões do Google Drive e decidirem se a pesquisa deverá ser realizada ou não por si mesmos ou encaminharem a sugestão de pesquisa e desenvolvimento para o membro da empresa júnior que possa melhor avaliar a necessidade de realização da pesquisa. Em qualquer cenário, a divisão de R&D deve notificar o membro que sugeriu a pesquisa ao decidir se a pesquisa será ou não realizada e mover a sugestão para a pasta \" Arquivadas\" após tomar todas as ações devidas. Caso a pesquisa não seja realizada, uma justificativa deve ser fornecida. Caso a pesquisa seja realizada, o membro que sugeriu a pesquisa deve ser notificado no momento de sua conclusão."]},{"l":"Pesquisa de ideias","p":["Quando uma sugestão de pesquisa e desenvolvimento for aceita pela divisão de R&D, um dos membros da diretoria administrativo-financeira da Struct deve ser escolhido para pesquisar aquela ideia e escrever os resultados encontrados. Essa pesquisa deve levar no máximo umas 2-3 semanas e deve resultar em um relatório (existe um modelo no Google Drive chamado \" Relatório de pesquisa e desenvolvimento (R&D)\"), o qual será entregue para os diretores da Struct ou para o conjunto de membros especificado no documento de sugestão de pesquisa e desenvolvimento. Esse relatório é bem simples, tendo aproximadamente 1 página (afinal de contas, o curso de Engenharia da Computação já possui trabalhos escritos que chega), e deve providenciar as informações básicas mais importantes resultando da pesquisa.","No momento, o acompanhamento das pesquisas realizadas e pendentes da divisão de R&D é feito pelo Trello, mas sinta-se livre sugerir para o responsável da divisão de R&D a utilização de qualquer outro meio para essa finalidade."]}],[{"l":"Reembolso para membros","p":["Embora o ideal seja evitar essa situação, por vezes, alguma despesa da empresa acaba sendo paga diretamente por algum membro, que acaba precisando de um reembolso do valor investido. No entanto, pelo nosso caráter de Empresa Júnior, somos proibidos de pagar nossos membros, então todo o processo de reembolso deve ser feito de forma cuidadosa para evitar problemas futuros com a receita."]},{"l":"Gastos passíveis de reembolso","p":["Todos os gastos devem ser avisados previamente ao Diretor Administrativo-Financeiro, para ser dado um aceite com antecedência. Alguns dos gastos passíveis de reembolso incluem:","Gastos com cartório","Gastos com transporte para realização de tarefas oficiais da Struct","Compra de materiais para projetos (caso não seja possível a compra direta pela empresa)","Compra de ingressos para eventos oficiais MEJ (Se aprovados previamente pela diretoria de Adm-Fin)","Pagamentos de serviços da Struct (se não puder ser pago diretamente pela empresa, ou houver alguma vantagem no pagamento pelo membro)","Demais casos são de responsabilidade do Diretor de Adm-Fin para analisar. Gastos com gamificação devem ser feitos, preferencialmente, diretamente pela empresa."]},{"l":"Notas fiscais","p":["Exija do membro notas fiscais dos gastos efetuados para validação. Se possível, peça com antecedência para o membro que a nota fiscal seja emitida com o CNPJ da empresa (21.803.569/0001-65). Para gastos com transporte, peça o recibo do Uber ou similares (caso seja o utilizado pelo membro), ou uma nota fiscal de um posto de gasolina, juntamente com fotos do odômetro do carro antes e depois da viagem. Com isso em mão, o Diretor de Adm-Fin pode realizar a transferência do reembolso para o membro."]},{"l":"Recibo de reembolso","p":["Na galeria de modelos no drive da empresa há um modelo de documento de recibo de reembolso. Preencha esse documento com as informações do membro que recebeu o reembolso, o valor do reembolso e a descrição do gasto realizado. Anexe as notas ficais e comprovantes bancários correspondentes ao documento, seja inserindo as imagens no documento ou usando ferramentas como o I Love PDF para mesclar os arquivos. Depois, coloque para o membro assinar no Clicksign. Por fim, registre o reembolso no trello da Adm-Fin, juntamento com o recibo, e guarde o recibo também no drive da empresa."]}],[{"l":"Introdução","p":["Essa página foi criada com o intuito de que se facilite o entendimento sobre cupons e prêmios para os membros."]},{"i":"onde-comprar-os-cupons","l":"Onde comprar os cupons?","p":["iFood(Cupons variando de R$ 10,00 até R$300,00)","Steam(Cupons variando de R$ 10,00 até R$ 200,00)","Para cupons mais diversos:","Americanas"]},{"i":"sites-disponíveis-para-prêmiosprêmios--cupons","l":"Sites disponíveis para prêmios(Prêmios != Cupons)","p":["Kabum","Magalu","Americanas","Casas Bahia"]},{"l":"Credenciais dos sites que temos conta para as compras","p":["Caso você não saiba as credenciais dos sites que foram citados acima, entre em contato com o diretor atual ou o anterior de Adm&Fin da empresa, algum deles te ajudará."]}],[{"l":"Bem-vindo a Diretoria Financeira"}],[{"l":"Bem-vindo a Diretoria Comercial"}],[{"l":"Bem-vindo a Diretoria de Marketing"}],[{"l":"Bem-vindo a Diretoria de Pessoas"}],[{"i":"o-que-é-heroku-","l":"O que é Heroku ?","p":["Heroku é uma plataforma de deployment de website, desenvolvidos em quase todos frameworks mais famosos utimamente, ela automaticamente analisa o repositório e verifica a linguagem que você está utilizando, e já faz o setup completo, facilitando uma das principais e mais demoradas atividades de um projeto de website. O Heroku roda um container docker com seus scripts de inicialização. Isso significa que é necessário que o seu projeto seja um servidor, ou seja, que ele tenha uma porta para ser acessado, e que ele seja capaz de responder a requisições. Sendo assim, é ideal para api's, mas não para servir assets estáticos(como os gerados numa aplicação React comum).","O Heroku, na ultima atualização dessa documentação, não possui plano gratuito, logo utilizamos self-hosting para o back-end na Struct."]}],[{"i":"como-usar-heroku-","l":"Como usar Heroku ?"},{"l":"Configurando o projeto","p":["Esse deploy esta sendo feito com base em um projeto Rails","Crie uma branch chamada heroku, caso ainda não tenha, e faça as seguintes mudanças;","Crie um arquivo chamado start.sh na raíz do projeto com o seguinte conteúdo:","#!/bin/sh: essa linha tem, por principal objetivo, informar ao shell qual intérprete deverá ser usado para a execução do script. No nosso caso, o intérprete usado será o sh, ou seja o Bourne shell.","rails db:migrate: a linha de código padrão para executar as migrations no rails e garantir que todos os bancos de dados estejam atualizados e com suas informações certas","bundle exec puma -C config/puma.rb: esse código funciona como um rails s, ou seja, serve para executar o puma (servidor padrão do rails) com alguns recursos a mais que o rails s por si só, não oferece.","Caso seu projeto utilize Active Storage, ou guarda alguma imagem enviada por upload, é necessário mudar o path, no qual os arquivos ficam armazenados, escolhendo entre cloudinary e amazon s3. Execute o comando Certo para configurar os arquivos.","Não colocar as chaves de acesso no repositório, apenas no heroku. Na branch de produção, requisitar as variáveis de ambiente no heroku, e colocar no código com ENV['NOME_DA_VARIAVEL'].","Colocar as variáveis de ambiente no heroku","Instalar a SDK do serviço escolhido;","Executar o comando:","config/environments/production.rb;","config/storage.yml;","config/initializers/active_storage.rb;","Colocar as chaves de acesso do serviço escolhido no Heroku;"]},{"l":"Executando deploy do projeto"},{"l":"Por CLI","p":["Tutorial para instalar o CLI do heroku https://devcenter.heroku.com/articles/heroku-cli#download-and-install","Logar no Heroku e criar uma nova aplicação;","Na pasta do repositório do projeto, executar o comando:","Configure o banco de dados para PostgreSQL;","E por fim execute o comando:"]},{"l":"Por Dashboard","p":["Acesse a dashboard da conta de projetos da Struct;","Crie uma nova aplicação;","Navegue até a aba Deploy e selecione a opção GitHub;","Selecione o repositório do projeto;","Selecione a branch Heroku;","Selecione a opção Deploy Branch."]},{"l":"Deploy front-end com heroku","p":["É possível usar do Heroku para fazer deploy de front-end. Basta criar um único endpoint para enviar os assets estáticos do front. Exemplo:","Agora temos uma api, e então o deploy pode ser feito no Heroku."]}],[{"i":"o-que-é-netlify-","l":"O que é Netlify ?","p":["O Netlify é um serviço de hospedagem de sites estáticos, que também oferece serviços de staging e deploy automatizados. Isso significa que não é possível hospedar backend no Netlify, apenas frontend (com possibilidade de AWS Lambda).Para fazer deploy no Netlify, a possiblidade atualmente gratuita é fazer deploy manual, que consiste em gerar e colocar manualmente os arquivos que serão servidos no site. Sendo assim, o processo de bundling deve ser feito na mão."]}],[{"i":"como-usar-netlify-","l":"Como usar Netlify ?"},{"l":"Configurando o projeto","p":["Na própria main, mude o /public/favicon.ico para o real ícone do projeto.","Mude o index.html, trocando os conteúdos das tags meta, title e a lang da tag html.","Pense na possibilidade de adicionar um /public/robots.txt.","Crie uma branch chamada netlify","Mude todas as referências a localhost por suas respectivas urls de produção","Se você tem uma instância axios com a url http://localhost:3333/api/v1, mude para https://seu-projeto.railway.app/api/v1 ou equivalente (a url de staging). Se a url das imagens é http://localhost:3333/, mude para https://seu-projeto.railway.app ou equivalente."]},{"l":"Roteamento Client Side","p":["Geralmente fazemos deploy de React como single page app, com um roteador client side, como react-router-dom. Sendo assim, rotas não são endpoints, e sempre devem ser retornados os mesmos arquivos pra requisições, independente da rota.","Adicione o arquivo _redirects no do projeto com o seguinte conteúdo:"]},{"l":"Fazendo deploy manual","p":["Vá para a branch netlify;","Rode o comando yarn build para gerar uma pasta build com os arquivos estáticos;","Faça login na conta de projetos da Struct;","Selecione a opção de deploy manual ( deploy manually);","Arraste e solte os arquivos da pasta build na área de upload;"]}],[{"i":"o-que-é-self-hosting-back-end-","l":"O que é Self-Hosting (Back-End) ?","p":["Self-hosting, também conhecido como auto-hospedagem, é um conceito em tecnologia que se refere à prática de hospedar e gerenciar seus próprios serviços, aplicativos ou plataformas em infraestrutura própria, em vez de utilizar serviços e plataformas de terceiros ou fornecedores externos. Em outras palavras, quando você opta por self-hosting, você é responsável por configurar, administrar e manter todos os aspectos do serviço ou aplicativo que está executando. No momento, pagamos por um servidor no DigitalOcean, que é um serviço de cloud computing, ou seja, uma plataforma que usa a conectividade da internet para hospedar e prover recursos, programas e informações em nuvem, e usamos ssh para acessá-lo e fazê-lo rodar exatamente o que queremos. Além disso, usamos Docker para poder isolar e rodar vários servidores na mesma máquina. Para levar o tráfego que chega em nossa máquina para o container correto, usamos o Traefik v2 como proxy reverso."]}],[{"i":"como-fazer-self-hosting-back-end","l":"Como fazer Self-Hosting (Back-End)?"},{"l":"Configurando o projeto para deploy","p":["É mantido um repositório no GitBucket com os DockerFiles utilizados para construir as imagens do nosso servidor, bem como um repositório armazenado no servidor, com os arquivos do Docker Compose utilizados para rodar as imagens construídas.","Crie uma branch production;","Adicione Dockerfile ao .gitignore do projeto;"]},{"l":"Crie a imagem Docker","p":["Não coloque Dockerfiles no repositório do projeto, utilize o repositório do GitBucket para isso. Colocar esse arquivo no projeto pode causar problemas de segurança. Muitos dos nossos Dockerfiles usam credenciais que não devem ser expostas.","Pegue o template de Dockerfile no GitBucket","Modifique conforme necessário, a fim de a imagem docker necessária.","Para construir a imagem, use o comando:","Várias das nossas imagens são um pull do projeto, e para isso é necessário um token de acesso no github. Para gerar esse token, pode ser seguida a Documentação do GitHub."]},{"l":"Faça o Push da imagem Docker","p":["Faça login no DockerHub, usando o comando:","Faça o push da imagem para o DockerHub, usando o comando:","O structej/projetos é o usuário/projeto que enviamos a imagem de tag {nome_do_projeto_versão}. É importante fazer assim, pois por padrão projetos no DockerHub são públicas, então enviamos ela para um repositório que sabemos ser privado."]},{"l":"Faça o docker-compose no servidor","p":["Os templates de docker-compose.yml ficam na pasta templates do repositório armazenado no servidor.","Fazer as atualizações localmente;","Fazer um push para o repositório;","Fazer um pull no servidor;","Faça o pull/clone do repositório do Docker Compose, usando o comando","Crie um docker-compose.yml com o serviço do projeto, usando o template de docker-compose.yml."]},{"l":"Atualize a branch production","p":["Crie uma PR para a branch production, com as adições que devem ser feitas no deploy;","Procure por coisas que podem quebrar ou requerem passos adicionais no deploy, como mudanças de banco de dados, ou mudanças de configuração de serviços."]},{"l":"Atualize a imagem docker","p":["Faça o build da imagem docker, usando o comando:","Agora a versão da imagem docker é versão. Sempre incrementamos a versão da imagem docker, para que possamos fazer o rollback caso algo aconteça de errado.","Faça o push da imagem para o DockerHub, usando o comando:"]},{"l":"Atualize o docker-compose no servidor","p":["Mudar a propriedade image do serviço do projeto no docker-compose.yml para a versão atual da imagem docker;","Faça o commit das alterações;","Faça o push do docker-compose.yml;"]}],[{"i":"o-que-é-self-hosting-front-end","l":"O que é Self-Hosting (Front-End)?","p":["Self-hosting, também conhecido como auto-hospedagem, é um conceito em tecnologia que se refere à prática de hospedar e gerenciar seus próprios serviços, aplicativos ou plataformas em infraestrutura própria, em vez de utilizar serviços e plataformas de terceiros ou fornecedores externos. Em outras palavras, quando você opta por self-hosting, você é responsável por configurar, administrar e manter todos os aspectos do serviço ou aplicativo que está executando.Considerando que nenhum framework, e nem SSR, está sendo usado, a aplicação react não inclui servidor. No ambiente de desenvolvimento são usadas ferramentas para servir a aplicação na porta determinada (na Struct determinamos como 3000), mas no deploy utilizamos o NGinx, um servidor web que pode ser usado para servir arquivos estáticos, como imagens, css, js, etc. Sendo assim, depois que nossa aplicação react é buildada, ela é mantida pelo NGinx."]}],[{"i":"como-faz-self-hosting-front-end","l":"Como faz Self-Hosting (Front-End)?"},{"l":"Configurando o projeto","p":["Considere a branch production do projeto front-end-template e suas alterações."]},{"l":"Configurando o NGinx","p":["Criar um arquivo nginx.conf para configuração do NGinx na raíz do projeto.","Colocar o seguinte conteudo dentro do arquivo criado:","Trocar os valores de dominio.exemplo.ex e www.dominio.exemplo2 pelos domínios que o aplicação que será feito o deploy.Se o app for servido em www.struct.com.br, o arquivo deve conter:"]},{"l":"Mudando as urls de localhost","p":["A aplicação React usa urls locais para acessar a API, por exemplo, http://localhost:3333/api/v1. Essas urls devem ser alteradas para as urls de produção, por exemplo, https://api.struct.com.br/api/v1.É possível fazer isso usando variáveis de ambiente, mas no momento deve ser trocado manualmente, como no nosso repositório de exemplo (talvez esse gitbook esteja desatualizado em relação ao repositório, verifique)."]},{"i":"mudando-o-indexhtml","l":"Mudando o index.html","p":["Alterar o arquivo index.html para conter informações corretas sobre a aplicação, bem como os metadados.","Criar um robots.txt, para ajudar os mecanismos de busca, além indexar o site conforme necessario.","Colocar o título correto, colocar descrição, mudar o favicon e a linguagem para pt-BR."]},{"l":"Criando docker image","p":["Vá para a branch production localmente.","Crie um arquivo chamado Dockerfile na raíz do projeto.","Atualize o url do git presente no arquivo, mudando o nome do projeto e o token de autenticação do GitHub."]},{"l":"Criando container","p":["Atualize o repositório de docker_compose da Struct com o seguinte comando:","Crie uma pasta com o nome do projeto.","Modifique o template de docker-compose.yml do Traefik com os nomes que podem ser usados para identificar o projeto nos logs, caso ocorra algum erro.","Definir a imagem que será usada com o valor de image.","Alterar os valores de environment, restart, volumes, e networks.","Crie o container usando o comando:"]}],[{"l":"Bem-vindo a Diretoria de Projetos"}],[{"l":"Bem-vindo a Diretoria de Presidentes"}]]